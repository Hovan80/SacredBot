const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('Parti_control')
        .setDescription('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —É—á–∞—Å—Ç–∏–π —Ä–µ–π–¥–∞')
        .addRoleOption(option =>
            option.setName('Role')
            .setDescription('–†–æ–ª—å —Ä–µ–π–¥–∞')
            .setRequired(true))
        .addStringOption(option =>
            option.setName('Title')
            .setRequired(true))
        .addStringOption(option =>
            option.setName('Description'))
            .setDescription('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'),
    async execute(interaction) {

        const role = interaction.option.getRole('Role').id;
        const title = interaction.option.getString('Title');
        const desc = interaction.option.getString('Description');

        const members = await interaction.guild.members.fetch();
        members.sweep(user => !user.roles.cache.some(userRole => userRole.id === role));

        const membersStatus = {};
        const startMembersList = '';
        for (const member in members) {
            membersStatus[member.id] = 'ignore';
            startMembersList.concat(`${member.id}<br>`);
        }

        const buttons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('success')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji({ name: '‚úÖ' }),

                new ButtonBuilder()
                    .setCustomId('cancel')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji({ name: '‚ùå' }),

                new ButtonBuilder()
                    .setCustomId('maybe')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji({ name: '‚ùì' }),
                new ButtonBuilder()
                    .setCustomId('delete')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji({ name: 'üóë' }),
            );

        const embed = new EmbedBuilder()
            .setTitle(title)
            .setDescription(desc)
            .setFields(
                { name: 'success', inline: true },
                { name: 'cancel', inline: true },
                { name: 'maybe', inline: true },
                { name: 'ignore', value: startMembersList, inline: true },
            );

        await interaction.reply({ embed: [embed], components: [buttons] });

        const collector = await interaction.message.createMessageComponentCollector();

        collector.on('collect', async (action) => {
            const buttonId = action.customId;

            if (buttonId === 'delete') { action.message.delete(); }
            else {
                const messageEmbed = action.message.embeds[0];
                const member = action.member.id;

                for (let fieldIndex = 0; fieldIndex < messageEmbed.fields.length; fieldIndex++) {
                    if (messageEmbed.fields[fieldIndex].name === membersStatus[member]) {
                        messageEmbed.fields[fieldIndex].value.replace(`${member}<br>`);
                        break;
                    }
                }
                for ()
            }
        });
    },
};

// –ü–æ –∫–Ω–æ–ø–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª—É—é –∫–æ–ª–æ–Ω–∫—É (–ò–¥—É, –Ω–µ –∏–¥—É, –Ω–µ –∑–Ω–∞—é). –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –µ–≥–æ —Å—Ç–∞—Ç—É—Ç—Å—É. –î–ª—è —ç—Ç–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞,
// –¥–∞–ª–µ–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –µ–≥–æ –∫–æ–ª–æ–Ω–∫–∞ (–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ name –∫–æ–ª–æ–Ω–æ–∫ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å). –ò–∑ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ
// –∫–æ–ª–æ–Ω–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π), –ø–æ—Å–ª–µ —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É